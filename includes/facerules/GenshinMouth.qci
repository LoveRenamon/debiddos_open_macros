/////////////////////////////////////////////////////////////////
// Start Facerules (Mouth) Version 3 (phoneme playground)
//   Writen by: Davi (Debiddo) Gooz
/////////////////////////////////////////////////////////////////

/* Required Shapes: */
// Since 麻辣香锅 uses VTA, here is required shapes
defaultflex                       frame  0 // AU0 (internal)
flex     "Mouth_Default"          frame  1 // AU0 baseline
flexpair "Mouth_A01"         1.0  frame  2 // AU26 jaw_drop & AU26Z jaw_drop_extreme
flexpair "Mouth_Open01"      1.0  frame  3 // AU18 pucker
flexpair "Mouth_Smile01"     1.0  frame  4 // AU12 lip_corner_puller
flexpair "Mouth_Smile02"     1.0  frame  5 // AU27 mouth_stretch
flexpair "Mouth_Angry01"     1.0  frame  6 // AU15 lip_depressor
flexpair "Mouth_Angry02"     1.0  frame  7 // AU10 sneer lip_upper_raiser_part & AU25 lip_part
flex     "Mouth_Angry03"          frame  8 // AD32 bite
flexpair "Mouth_Fury01"      1.0  frame  9 // AU27Z mouth_stretch_extreme
flexpair "Mouth_Doya01"      1.0  frame 10 // AU12 lip_corner_puller
flexpair "Mouth_Doya02"      1.0  frame 11 // AU12AU25 lip_corner_puller + lip_part
flex     "Mouth_Neko01"           frame 12 // Unknow Actor use (?)
flex     "Mouth_Pero01"           frame 13 // TM103
flex     "Mouth_Pero02"           frame 14 // TM106
flexpair "Mouth_Line01"      1.0  frame 15 // AU20 lip_stretcher
flexpair "Mouth_Line02"      1.0  frame 16 // AU22 lip_funneler
flexpair "Mouth_BigTongue01" 1.0  frame 17 // AU101 tongue_flattening


// Note: Declare necessary flexcontrollers after this block
// TODO: Move all this controllers to the first entry, so it become "cleaner" somehow
/////////////////////////////////////////////////////////////////
// Required Facerules for this block
/////////////////////////////////////////////////////////////////
flexcontroller mouth   range 0 1 right_upper_raiser     left_upper_raiser
flexcontroller mouth   range 0 1 right_corner_puller    left_corner_puller
flexcontroller mouth   range 0 1 right_corner_depressor left_corner_depressor
flexcontroller mouth   range 0 1 chin_raiser
flexcontroller mouth   range 0 1 smile
flexcontroller mouth   range 0 1 right_cheek_puffer left_cheek_puffer
flexcontroller mouth   range 0 1 right_lip_suck left_lip_suck
flexcontroller mouth   range 0 1 right_sneer left_sneer

flexcontroller nose range 0 1 right_wrinkler left_wrinkler wrinkler

flexcontroller mouth range -1 1 mouth_sideways jaw_sideways

flexcontroller phoneme range 0 1 right_part      left_part
flexcontroller phoneme range 0 1 right_puckerer  left_puckerer
flexcontroller phoneme range 0 1 right_funneler  left_funneler
flexcontroller phoneme range 0 1 right_stretcher left_stretcher
flexcontroller phoneme range 0 2 jaw_drop
flexcontroller phoneme range 0 1 right_mouth_drop left_mouth_drop
flexcontroller phoneme range 0 1 wide_open    lower_lip
flexcontroller phoneme range 0 1 bite presser tightener jaw_clencher

flexcontroller tongue range  0 1 lick right_tongue_flattening left_tongue_flattening

flexcontroller phoneme range 0 1 w

// NOTE: the bellow controlles aren't used by Left 4 Dead 2:
// right_lip_suck
// left_lip_suck
// lick
// right_tongue_flattening
// left_tongue_flattening
// w

/////////////////////////////////////////////////////////////////
// Mouth System
/////////////////////////////////////////////////////////////////
// Baseline AU0
// NOTE: Enabled if no mouth shape is active. This should do nothing unless the character use some uncommon expression by default, so a active Baseline will fix it
/////////////////////////////////////////////////////////////////
%Mouth_Default = ( 1 - right_upper_raiser ) * ( 1 - left_upper_raiser ) * ( 1 - right_corner_puller ) * ( 1 - left_corner_puller ) * ( 1 - right_corner_depressor ) * ( 1 - left_corner_depressor ) * ( 1 - chin_raiser ) * ( 1 - smile ) * ( 1 - right_sneer ) * ( 1 - left_sneer ) * ( 1 - right_part ) * ( 1 - left_part ) * ( 1 - right_puckerer ) * ( 1 - left_puckerer ) * ( 1 - right_funneler ) * ( 1 - left_funneler ) * ( 1 - right_stretcher ) * ( 1 - left_stretcher ) * ( 1 - right_mouth_drop ) * ( 1 - left_mouth_drop ) * ( 1 - jaw_drop ) * ( 1 - bite ) * presser tightener jaw_clencher * ( 1 - wide_open ) * ( 1 - lower_lip ) * ( 1 - w ) * ( 1 lick ) * ( 1 right_tongue_flattening ) * ( 1 left_tongue_flattening )


// TODO: missing shapes
// IDEA: sculp/model by ourselves
localvar AU9R   AU9L   // nose_wrinkler
localvar AU16L  AU16R  // lower_lip
localvar AU13L  AU13R  // cheek_puffer
localvar AU17R  AU17L  // chin_raiser (currently hacked as AU15)
localvar AU28R  AU28L  // lip_suck
localvar AD30L  AD30R  // jaw_sideways
localvar AD96L  AD96R  // mouth_sideways

// NOTE: This are existent shapes but as requested by 麻辣香锅, changed to allow blend shapes by actors and avoid a recursive and circular logic
//   at end of this qc is placed the variables, and why? due the sequential needed order
localvar AU10R AU10L AU12R AU12L AU12AU25R AU12AU25L AU15R AU15L AU18L AU18R AU20R AU20L AU22R AU22L AU24 AU25R AU25L AU26L AU26R AU26ZL AU26ZR AU27R AU27L AU27ZR AU27ZL AU31 AD32


/////////////////////////////////////////////////////////////////
// Sensors
// Valve already use flexcontroller names here, so we can reuse in another models
//   NOTE: Debiddo had fine tuned to make then compatible with builtin shapes for Genshin Imapct characters (possibily compatible with other miHoYo games)
/////////////////////////////////////////////////////////////////

localvar lower_lip_active
%lower_lip_active = lower_lip * ( 1 - min( jaw_drop / 2 , 1 )

// open action unit
localvar right_au_open left_au_open
%right_au_open = min( %AU18R + %AU25R + %AU12AU25R + 0.5 * %AU22R + %AU22R + %AU12R , 1 )
%left_au_open  = min( %AU18L + %AU25L + %AU12AU25L + 0.5 * %AU22L + %AU22L + %AU12L , 1 )

// open mouth amount
localvar right_open left_open
%right_open = right_part* ( 1 - smile ) + right_puckerer + right_funneler + right_upper_raiser * 0.5 + lower_lip * 0.5
%left_open  = left_part * ( 1 - smile ) + left_puckerer  + left_funneler  + left_upper_raiser  * 0.5 + lower_lip * 0.5

localvar lip_suppressor right_lip_suppressor left_lip_suppressor
%lip_suppressor = ( 1 - presser ) * ( 1 - bite )
%right_lip_suppressor = %lip_suppressor
%left_lip_suppressor  = %lip_suppressor

// blend between part and smile
localvar right_scaled_part left_scaled_part
%right_scaled_part = right_part * ( 1 - right_puckerer * (( 1 / 2 ) - right_funneler * ( 1 / 6 )) - right_funneler * ( 1 / 4 )) * %right_lip_suppressor
%left_scaled_part  = left_part  * ( 1 - left_puckerer  * (( 1 / 2 ) - left_funneler  * ( 1 / 6 )) - left_funneler  * ( 1 / 4 )) * %left_lip_suppressor

// drop_suppressor
localvar right_drop_suppressor left_drop_suppressor
%right_drop_suppressor = ( 1 / ( 0.5 * %right_open + right_mouth_drop )) * %right_lip_suppressor
%left_drop_suppressor  = ( 1 / ( 0.5 * %left_open  + left_mouth_drop  )) * %left_lip_suppressor

// drop
localvar right_drop left_drop
%right_drop = right_mouth_drop * ( right_mouth_drop * %right_drop_suppressor )
%left_drop  = left_mouth_drop  * ( left_mouth_drop  * %left_drop_suppressor )

// pick the upper raiser based on the lips being parted or not
localvar right_raiser_suppressor left_raiser_suppressor
%right_raiser_suppressor = ( 1 - 0.3 * %AU22R ) * ( 1 - 0.5 * %AU18R ) * %right_lip_suppressor * ( 1 - right_corner_puller ) * ( 1 - 0.5 * jaw_drop )
%left_raiser_suppressor  = ( 1 - 0.3 * %AU22L ) * ( 1 - 0.5 * %AU18L ) * %left_lip_suppressor  * ( 1 - left_corner_puller  ) * ( 1 - 0.5 * jaw_drop )

// suppressor for depressor
localvar right_depressor_suppressor left_depressor_suppressor
%right_depressor_suppressor = ( 1 / ( %AU18R * 0.8 + %AU22R * 0.8 + %AU17R + bite + right_corner_puller + right_stretcher + right_corner_depressor ))
%left_depressor_suppressor  = ( 1 / ( %AU18L * 0.8 + %AU22L * 0.8 + %AU17L + bite + left_corner_puller  + left_stretcher  + left_corner_depressor  ))

// corner_suppressor
localvar right_corner_suppressor left_corner_suppressor
%right_corner_suppressor = ( 1 / (%AU18R * 0.8 + %AU22R * 0.8 + %AU17R + bite + right_corner_puller + right_stretcher + right_corner_depressor )) * ( 1 - jaw_drop * 0.25 )
%left_corner_suppressor  = ( 1 / (%AU18L * 0.8 + %AU22L * 0.8 + %AU17L + bite + left_corner_puller  + left_stretcher  + left_corner_depressor  )) * ( 1 - jaw_drop * 0.25 )

// blend two tongue lick shapes through "A" phoneme style
// See: https://steamcommunity.com/sharedfiles/filedetails/?id=2831588552
localvar phoneme_a phoneme_a_overage phoneme_a_underage
localvar lick_overage lick_underage

%phoneme_a = ( jaw_drop + wide_open ) * 0.5
%phoneme_a_overage  = max( 0 , ( %phoneme_a - 0.5 ) * ( 1 - 0.5 * max( %right_au_open , %left_au_open )))
%phoneme_a_underage = min( %phoneme_a , 0.5 ) - %phoneme_a_overage

%lick_overage  = max( 0 , ( lick - 0.5 )) * ( 1 - bite )
%lick_underage = min( lick , 0.5 ) - %lick_overage

/////////////////////////////////////////////////////////////////
// Wrinkler AU9
/////////////////////////////////////////////////////////////////
%AU9R = right_wrinkler * %right_raiser_suppressor * ( 1 - right_upper_raiser ) + ( wrinkler * 0.5 )
%AU9L = left_wrinkler  * %left_raiser_suppressor  * ( 1 - left_upper_raiser  ) + ( wrinkler * 0.5 )

/////////////////////////////////////////////////////////////////
// Upper Raiser / Sneer AU10
/////////////////////////////////////////////////////////////////
%AU10R = right_upper_raiser * %right_raiser_suppressor + right_sneer * ( 1 - bite * 0.5 )
%AU10L = left_upper_raiser  * %left_raiser_suppressor  + left_sneer  * ( 1 - bite * 0.5 )

/////////////////////////////////////////////////////////////////
// Corner Depressor AU15
/////////////////////////////////////////////////////////////////
%AU15R = right_corner_depressor * ( right_corner_depressor * %right_depressor_suppressor )
%AU15L = left_corner_depressor  * ( left_corner_depressor  * %left_depressor_suppressor  )

/////////////////////////////////////////////////////////////////
// Lower Lip AU16
/////////////////////////////////////////////////////////////////
%AU16L = %lower_lip_active * %left_lip_suppressor
%AU16R = %lower_lip_active * %right_lip_suppressor

/////////////////////////////////////////////////////////////////
// Chin Raiser AU17
/////////////////////////////////////////////////////////////////
%AU17R = chin_raiser * ( 1 - jaw_drop * 0.5 ) * ( 1 - bite ) * max( 0 , ( 1 - 2 * ( %AU25R + %AU12AU25R + %AU18R + %AU22R + %AU10R )))
%AU17L = chin_raiser * ( 1 - jaw_drop * 0.5 ) * ( 1 - bite ) * max( 0 , ( 1 - 2 * ( %AU25L + %AU12AU25L + %AU18L + %AU22L + %AU10L )))

// HACK: make AU17 = AU15
%AU15R = %AU15R + %AU17R
%AU15L = %AU15L + %AU17L

/////////////////////////////////////////////////////////////////
// Lip Corner Puller AU12
/////////////////////////////////////////////////////////////////
%AU12R = right_corner_puller * (right_corner_puller * %right_corner_suppressor ) * ( 1 - right_part ) + smile
%AU12L = left_corner_puller  * (left_corner_puller  * %left_corner_suppressor  ) * ( 1 - left_part  ) + smile

/////////////////////////////////////////////////////////////////
// Lip Corner Puller + Lip Part AU12 + AU25
/////////////////////////////////////////////////////////////////
%AU12AU25R = %right_scaled_part * right_corner_puller * ( 1 - %AU10R ) * ( 1 - %AU9R )
%AU12AU25L = %left_scaled_part  * left_corner_puller  * ( 1 - %AU10L ) * ( 1 - %AU9L )

/////////////////////////////////////////////////////////////////
// Cheek Puffer AU13
/////////////////////////////////////////////////////////////////
%AU13R = right_cheek_puffer - ( right_corner_puller + right_stretcher ) * 0.5
%AU13L = left_cheek_puffer  - ( left_corner_puller  + left_stretcher  ) * 0.5

/////////////////////////////////////////////////////////////////
// Puckerer AU18
/////////////////////////////////////////////////////////////////
%AU18R = right_puckerer * ( 1 - right_part * (( 1 / 2 ) - right_funneler * ( 1 / 6 )) - right_funneler * ( 1 / 4 )) * %right_lip_suppressor
%AU18L = left_puckerer  * ( 1 - left_part  * (( 1 / 2 ) - left_funneler  * ( 1 / 6 )) - left_funneler  * ( 1 / 4 )) * %left_lip_suppressor

/////////////////////////////////////////////////////////////////
// Lip Stretcher AU20
/////////////////////////////////////////////////////////////////
%AU20R = right_stretcher * ( right_stretcher * %right_corner_suppressor )
%AU20L = left_stretcher  * ( left_stretcher  * %left_corner_suppressor  )

/////////////////////////////////////////////////////////////////
// Funneler AU22
/////////////////////////////////////////////////////////////////
%AU22R = right_funneler *( 1 - right_part * (( 1 / 2 ) - right_puckerer * ( 1 / 3 )) - right_puckerer * ( 1 / 2 )) * %right_lip_suppressor
%AU22L = left_funneler  *( 1 - left_part  * (( 1 / 2 ) - left_puckerer  * ( 1 / 3 )) - left_puckerer  * ( 1 / 2 )) * %left_lip_suppressor

/////////////////////////////////////////////////////////////////
// Lip Pressor AU24
/////////////////////////////////////////////////////////////////
%AU24 = presser + ( 1 - presser ) * tightener

/////////////////////////////////////////////////////////////////
// Lip Part AU25
/////////////////////////////////////////////////////////////////
%AU25R = %right_scaled_part * ( 1 - right_corner_puller )
%AU25L = %left_scaled_part  * ( 1 - left_corner_puller )

/////////////////////////////////////////////////////////////////
// Jaw Drop      AU26
// Mouth Stretch AU27
// Wide Open     AU27Z
//   Note: upgraded from Valve's at: https://github.com/LoveRenamon/debiddos_open_macros/blob/029d593d99823d9c92651574849d6dd9dcaaea90/includes/Flex_FACS.qci#L261
/////////////////////////////////////////////////////////////////
localvar jaw_overage jaw_underage jaw_blend bite_active
%jaw_overage = max( 0 , ( jaw_drop - 1 ) * %lip_suppressor * ( 1 - 0.5 * max( %right_au_open , %left_au_open )))
%jaw_underage = min( jaw_drop , 1 ) - %jaw_overage
%jaw_blend = ( jaw_drop / ( jaw_clencher + jaw_drop ))
%bite_active = ( 1 - bite ) * ( 1 - wide_open )

// AU26          = AU26  = jaw_drop
// Mouth_A01     = AU26Z = jaw_drop_extreme
// Mouth_Smile02 = AU27  = mouth_stretch
// Mouth_Fury01  = AU27Z = mouth_stretch_extreme

// AU26 + AU26Z
%AU26R  = %jaw_underage * ( 1 - %right_drop ) * %jaw_blend * %bite_active 
%AU26L  = %jaw_underage * ( 1 - %left_drop  ) * %jaw_blend * %bite_active 
%AU26ZR = %jaw_overage  * ( 1 - %right_drop ) * %jaw_blend * %bite_active
%AU26ZL = %jaw_overage  * ( 1 - %left_drop  ) * %jaw_blend * %bite_active

// AU27 + AU27Z
%AU27R  = %jaw_underage * %right_drop * %jaw_blend * %bite_active 
%AU27L  = %jaw_underage * %left_drop  * %jaw_blend * %bite_active 
%AU27ZR = %jaw_overage  * %right_drop * %jaw_blend * ( 1 - wide_open ) + ( wide_open * 1.128 * ( 1 - bite ))
%AU27ZL = %jaw_overage  * %left_drop  * %jaw_blend * ( 1 - wide_open ) + ( wide_open * 1.128 * ( 1 - bite ))

/////////////////////////////////////////////////////////////////
// Lip Suck AU28
/////////////////////////////////////////////////////////////////
%AU28R = right_lip_suck * ( 1 - bite )
%AU28L = left_lip_suck  * ( 1 - bite )

/////////////////////////////////////////////////////////////////
// jaw Sideways AD30
/////////////////////////////////////////////////////////////////
%AD30L = max(-jaw_sideways , 0 )
%AD30R = max( jaw_sideways , 0 )

/////////////////////////////////////////////////////////////////
// Jaw Clencher AU31
/////////////////////////////////////////////////////////////////
%AU31 = jaw_clencher * ( jaw_clencher / ( jaw_clencher + min( jaw_drop , 1 )))

/////////////////////////////////////////////////////////////////
// Bite AD32
/////////////////////////////////////////////////////////////////
%AD32 = bite

/////////////////////////////////////////////////////////////////
// mouth Sideways AD96
/////////////////////////////////////////////////////////////////
%AD96L = max(-mouth_sideways , 0 ) * ( 1 - 0.5 * %right_au_open ) * ( 1 - %right_drop * jaw_drop * 0.25 ) * ( 1 - 0.5 * bite )
%AD96R = max( mouth_sideways , 0 ) * ( 1 - 0.5 * %left_au_open  ) * ( 1 - %right_drop * jaw_drop * 0.25 ) * ( 1 - 0.5 * bite )

/////////////////////////////////////////////////////////////////
// Tongue Flattening AU101
/////////////////////////////////////////////////////////////////
%Mouth_BigTongue01R = right_tongue_flattening
%Mouth_BigTongue01L = left_tongue_flattening

/////////////////////////////////////////////////////////////////
// blend tongue in two flexes
/////////////////////////////////////////////////////////////////
// TM103
/////////////////////////////////////////////////////////////////
%Mouth_Pero01 = %lick_underage * 1.5 * ( 1 - bite )
/////////////////////////////////////////////////////////////////
// TM106
/////////////////////////////////////////////////////////////////
%Mouth_Pero02 = %lick_overage  * 1.5 * ( 1 - bite )

/////////////////////////////////////////////////////////////////
// %mouth variable
/////////////////////////////////////////////////////////////////
%mouth = %AU26ZR * 0.5 + %AU26ZL * 0.5 \\
       + %AU27ZR * 0.5 + %AU27ZL * 0.5 \\
       + %phoneme_a * 0.25 + %AD32 * 0.3


// NOTE: This work/act like a playground, you can blend any Actor to this flexes, You should avoid call the same flex again to make less likey to make a circular behaviour

%Mouth_A01R = ( %AU26R * 0.5 ) + %AU26ZR
%Mouth_A01L = ( %AU26L * 0.5 ) + %AU26ZL

%Mouth_Open01R = ( %AU18R * 0.363636 ) + %AU22R
%Mouth_Open01L = ( %AU18L * 0.363636 ) + %AU22L

%Mouth_Smile01R = %AU12R
%Mouth_Smile01L = %AU12L

%Mouth_Smile02R = %AU27R
%Mouth_Smile02L = %AU27L

%Mouth_Angry01R = %AU15R
%Mouth_Angry01L = %AU15L

%Mouth_Angry02R = %AU25R + %AU10R
%Mouth_Angry02L = %AU25L + %AU10L

%Mouth_Angry03 = %AD32

%Mouth_Fury01R = %AU27ZR
%Mouth_Fury01L = %AU27ZL

%Mouth_Doya01R = %AU12R
%Mouth_Doya01L = %AU12L

%Mouth_Doya02R = %AU12AU25R
%Mouth_Doya02L = %AU12AU25L

%Mouth_Neko01 = w + ( %AU26R + %AU26L ) * 0.25

%Mouth_Line01R = %AU20R + %AU26R * 0.25
%Mouth_Line01L = %AU20L + %AU26L * 0.25

%Mouth_Line02R = %AU22R
%Mouth_Line02L = %AU22L
